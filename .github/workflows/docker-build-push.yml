name: CI/CD to Tencent CVM via GHCR

on:
  push:
    branches:
      - main

env:
  IMAGE_NAME: ghcr.io/${{ github.repository }}
  APP_CONTAINER_PORT: 8083

jobs:
  build-and-push-to-ghcr:
    name: Build and Push to GitHub Container Registry
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # --- 新增或修改的部分 ---
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      # --- 结束新增或修改的部分 ---

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=sha,prefix=
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image to GHCR
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # deploy-to-cvm job 保持不变
  deploy-to-cvm:
    name: Deploy to Tencent Cloud CVM
    runs-on: ubuntu-latest
    needs: build-and-push-to-ghcr

    steps:
      - name: Deploy to CVM
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.CVM_HOST }}
          username: ${{ secrets.CVM_USERNAME }}
          key: ${{ secrets.CVM_SSH_PRIVATE_KEY }}
          script: |
            set -e 

            export IMAGE_OWNER_REPO_LOWERCASE=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
            export IMAGE_TO_PULL="ghcr.io/${IMAGE_OWNER_REPO_LOWERCASE}:${{ github.sha }}"
            export CONTAINER_NAME="post-search-app" 
            export HOST_PORT="80" 
            
            echo "准备部署镜像: ${IMAGE_TO_PULL}"
            echo "容器内应用端口: ${{ env.APP_CONTAINER_PORT }}"
            echo "CVM主机端口: ${HOST_PORT}"

            echo "登录 GHCR..."
            docker login ghcr.io -u ${{ secrets.CVM_GH_USERNAME }} -p ${{ secrets.GHCR_PAT_FOR_CVM }}

            echo "拉取镜像: ${IMAGE_TO_PULL}"
            docker pull ${IMAGE_TO_PULL}

            echo "停止并删除旧容器 (如果存在)..."
            docker stop ${CONTAINER_NAME} || true
            docker rm ${CONTAINER_NAME} || true

            echo "启动新容器..."
            docker run -d \
              -p ${HOST_PORT}:${{ env.APP_CONTAINER_PORT }} \
              --name ${CONTAINER_NAME} \
              ${IMAGE_TO_PULL}
            
            echo "清理旧镜像..."
            docker image prune -af

            echo "部署成功!"