name: CI/CD to Tencent CVM via GHCR

on:
  push:
    branches:
      - main

env:
  # GHCR 基础镜像名，不含标签和 owner。owner 会从 github.repository_owner 获取
  # 仓库名也从 github.event.repository.name 获取，并转换为小写
  # IMAGE_REPO_NAME: ${{ github.event.repository.name }} # 直接用 github.repository 更简单
  APP_CONTAINER_PORT: 8083

jobs:
  build-and-push-to-ghcr:
    name: Build and Push to GitHub Container Registry
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      # 输出主要的版本标签 (通常是短SHA) 和 latest 标签 (如果适用)
      image_version_tag: ${{ steps.meta.outputs.version }} # 这是主要的、基于SHA的标签
      image_latest_tag: ${{ steps.meta.outputs.tags_latest }} # 捕获明确的 latest 标签 (如果生成的话)

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          # images 名称会自动处理为 ghcr.io/owner/repo (owner 和 repo 会保持 GitHub 上的大小写)
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=sha,format=short,prefix= # 短SHA标签, 例如: abc1234
            type=raw,value=latest,enable={{is_default_branch}} # latest 标签

      - name: Build and push Docker image to GHCR
        id: build_push # 给这个步骤一个ID，方便引用其输出
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Debug: 输出生成的标签，确认一下
      - name: Echo Docker metadata
        run: |
          echo "Tags: ${{ steps.meta.outputs.tags }}"
          echo "Version (main tag): ${{ steps.meta.outputs.version }}"
          echo "Image Digest: ${{ steps.build_push.outputs.digest }}"


  deploy-to-cvm:
    name: Deploy to Tencent Cloud CVM
    runs-on: ubuntu-latest
    needs: build-and-push-to-ghcr

    steps:
      - name: Deploy to CVM
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.CVM_HOST }}
          username: ${{ secrets.CVM_USERNAME }}
          key: ${{ secrets.CVM_SSH_PRIVATE_KEY }}
          script: |
            set -e

            # 从构建 job 获取基于 SHA 的短标签
            export IMAGE_TAG_TO_PULL="${{ needs.build-and-push-to-ghcr.outputs.image_version_tag }}"

            # 构造在 GHCR 上的基础镜像名，并转换为全小写以符合 docker pull 的期望
            # github.repository 的格式是 Owner/RepoName
            export GHCR_IMAGE_BASE_LOWERCASE=$(echo "ghcr.io/${{ github.repository }}" | tr '[:upper:]' '[:lower:]')

            export IMAGE_TO_PULL_FULL_NAME="${GHCR_IMAGE_BASE_LOWERCASE}:${IMAGE_TAG_TO_PULL}"

            export CONTAINER_NAME="post-search-app"
            export HOST_PORT="80"
            # APP_CONTAINER_PORT 是在 workflow 的 env 中定义的，值为 8083

            echo "准备部署的精确镜像: ${IMAGE_TO_PULL_FULL_NAME}"
            echo "使用的标签 (应为短SHA): ${IMAGE_TAG_TO_PULL}"
            echo "容器内应用端口: ${{ env.APP_CONTAINER_PORT }}" # 在 workflow 级别 env 定义
            echo "CVM主机端口: ${HOST_PORT}"

            echo "登录 GHCR..."
            docker login ghcr.io -u ${{ secrets.CVM_GH_USERNAME }} -p ${{ secrets.GHCR_PAT_FOR_CVM }}

            echo "拉取镜像: ${IMAGE_TO_PULL_FULL_NAME}"
            docker pull ${IMAGE_TO_PULL_FULL_NAME}

            echo "停止并删除旧容器 (如果存在)..."
            docker stop ${CONTAINER_NAME} || true
            docker rm ${CONTAINER_NAME} || true

            echo "启动新容器..."
            docker run -d \
              -p ${HOST_PORT}:${{ env.APP_CONTAINER_PORT }} \
              --name ${CONTAINER_NAME} \
              ${IMAGE_TO_PULL_FULL_NAME}

            echo "清理旧镜像..."
            docker image prune -af

            echo "部署成功!"