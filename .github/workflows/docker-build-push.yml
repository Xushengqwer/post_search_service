name: CI/CD to Tencent CVM via GHCR

on:
  push:
    branches:
      - main

env:
  # GHCR 上的基础镜像名称，不含标签。
  # github.repository 会提供 "Owner/RepoName" 的格式，GHCR 包名通常与此一致。
  IMAGE_NAME_BASE: ghcr.io/${{ github.repository }}
  APP_CONTAINER_PORT: 8083 # 你的 Go 应用在 Docker 容器内监听的端口

jobs:
  build-and-push-to-ghcr:
    name: Build and Push to GitHub Container Registry
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write # 允许写入 GitHub Packages (GHCR)

    outputs: # <--- 输出构建好的短 SHA 标签
      image_tag_sha: ${{ steps.meta.outputs.version }} # 'version' 通常是 metadata-action 基于SHA生成的主要标签

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata (tags, labels) for Docker
        id: meta # 给这个步骤一个 ID
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME_BASE }} # 使用定义的基础镜像名
          tags: |
            type=sha,prefix=,format=short # 明确使用短SHA作为标签
            type=raw,value=latest,enable={{is_default_branch}} # 仅在默认分支上打 latest 标签

      - name: Build and push Docker image to GHCR
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile # 明确指定 Dockerfile 路径
          push: true
          tags: ${{ steps.meta.outputs.tags }} # 使用 metadata-action 生成的所有标签
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-to-cvm:
    name: Deploy to Tencent Cloud CVM
    runs-on: ubuntu-latest
    needs: build-and-push-to-ghcr # 依赖上一个 job 成功完成

    steps:
      - name: Deploy to CVM
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.CVM_HOST }}
          username: ${{ secrets.CVM_USERNAME }}
          key: ${{ secrets.CVM_SSH_PRIVATE_KEY }}
          script: |
            set -e # 如果任何命令失败，则立即退出脚本

            # 从上一个 job (build-and-push-to-ghcr) 的 outputs 中获取短 SHA 标签
            export IMAGE_TAG_SHA_FROM_BUILD="${{ needs.build-and-push-to-ghcr.outputs.image_tag_sha }}"

            # 构造基础镜像名 (与 build job 中的 IMAGE_NAME_BASE 保持一致)
            # github.repository 的格式是 Owner/RepoName
            export GHCR_IMAGE_FULL_NAME_BASE="ghcr.io/${{ github.repository }}"

            # 构造要拉取的完整镜像名，使用从构建步骤获取的短 SHA 标签
            export IMAGE_TO_PULL="${GHCR_IMAGE_FULL_NAME_BASE}:${IMAGE_TAG_SHA_FROM_BUILD}"

            export CONTAINER_NAME="post-search-app" # 你想给容器起的名字
            export HOST_PORT="80"                   # CVM 上暴露给外部的端口

            echo "准备部署镜像: ${IMAGE_TO_PULL}"
            echo "构建时使用的标签 (短SHA): ${IMAGE_TAG_SHA_FROM_BUILD}"
            echo "容器内应用端口: ${{ env.APP_CONTAINER_PORT }}"
            echo "CVM主机端口: ${HOST_PORT}"

            echo "登录 GHCR..."
            docker login ghcr.io -u ${{ secrets.CVM_GH_USERNAME }} -p ${{ secrets.GHCR_PAT_FOR_CVM }}

            echo "拉取镜像: ${IMAGE_TO_PULL}"
            docker pull ${IMAGE_TO_PULL}

            echo "停止并删除旧容器 (如果存在)..."
            docker stop ${CONTAINER_NAME} || true
            docker rm ${CONTAINER_NAME} || true

            echo "启动新容器..."
            docker run -d \
              -p ${HOST_PORT}:${{ env.APP_CONTAINER_PORT }} \
              --name ${CONTAINER_NAME} \
              ${IMAGE_TO_PULL}
              # 注意：关于配置文件和依赖服务 (Kafka, ES) 的问题我们后续处理

            echo "清理旧镜像..."
            docker image prune -af

            echo "部署成功!"