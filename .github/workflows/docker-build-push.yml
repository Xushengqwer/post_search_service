# .github/workflows/your-workflow-name.yml (最终修正版)

name: CI/CD for Post Search Service

on:
  push:
    branches:
      - main

env:
  APP_CONTAINER_PORT: 8083

jobs:
  build-and-push-to-ghcr:
    name: Build and Push Post Search to GHCR
    # ... (此部分无需改动，保持原样) ...
    # ...

  deploy-to-cvm:
    name: Deploy Post Search Service to CVM
    runs-on: ubuntu-latest
    needs: build-and-push-to-ghcr

    steps:
      - name: Deploy Post Search Service to CVM
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.CVM_HOST }}
          username: ${{ secrets.CVM_USERNAME }}
          key: ${{ secrets.CVM_SSH_PRIVATE_KEY }}
          command_timeout: 20m
          script: |
            set -e
            
            export IMAGE_TAG_TO_PULL="${{ needs.build-and-push-to-ghcr.outputs.image_tag }}"
            export GHCR_IMAGE_BASE_LOWERCASE=$(echo "ghcr.io/${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
            export IMAGE_TO_PULL_FULL_NAME="${GHCR_IMAGE_BASE_LOWERCASE}:${IMAGE_TAG_TO_PULL}"
            export CONTAINER_NAME="post-search-app"
            export DOCKER_NETWORK_NAME="doer_infra_doer_xyz_dev_network"

            echo "==> 1. 登录 GHCR..."
            docker login ghcr.io -u ${{ secrets.CVM_GH_USERNAME }} -p ${{ secrets.GHCR_PAT_FOR_CVM }}

            echo "==> 2. 拉取镜像: ${IMAGE_TO_PULL_FULL_NAME}"
            docker pull ${IMAGE_TO_PULL_FULL_NAME}

            echo "==> 3. 停止并删除旧容器 (如果存在)..."
            docker stop ${CONTAINER_NAME} || true
            docker rm ${CONTAINER_NAME} || true

            echo "==> 4. 启动新容器..."
            docker run -d \
              --name ${CONTAINER_NAME} \
              --network ${DOCKER_NETWORK_NAME} \
              --restart unless-stopped \
              -p ${{ env.APP_CONTAINER_PORT }}:${{ env.APP_CONTAINER_PORT }} \
              # 【最终关键修正】使用Kafka内部监听器的正确端口
              -e ELASTICSEARCHCONFIG_ADDRESSES="http://doer_elasticsearch:9200" \
              -e KAFKACONFIG_BROKERS="doer_kafka_broker1:29092,doer_kafka_broker2:29093" \
              ${IMAGE_TO_PULL_FULL_NAME}

            echo "==> 5. 检查容器健康状态..."
            for i in {1..12}; do
              HEALTH_STATUS=$(docker inspect --format '{{.State.Health.Status}}' ${CONTAINER_NAME} || echo "not_found")
              if [ "${HEALTH_STATUS}" == "healthy" ]; then
                echo "✅ 容器已健康运行!"
                break
              fi
              if [ "${HEALTH_STATUS}" == "not_found" ]; then
                echo "❌ 错误: 容器未能启动或已退出。"
                break
              fi
              echo "等待容器健康... 当前状态: ${HEALTH_STATUS} (尝试次数 ${i}/12)"
              sleep 5
            done
            
            FINAL_HEALTH_STATUS=$(docker inspect --format '{{.State.Health.Status}}' ${CONTAINER_NAME} || echo "not_found")
            if [ "${FINAL_HEALTH_STATUS}" != "healthy" ]; then
                echo "❌ 部署失败: 容器未能在60秒内达到健康状态。"
                docker logs ${CONTAINER_NAME}
                exit 1
            fi

            echo "🚀 部署成功完成! Post Search 应用正在 CVM 的 ${{ env.APP_CONTAINER_PORT }} 端口上运行。"