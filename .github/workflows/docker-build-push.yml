name: CI/CD to Tencent CVM via GHCR

on:
  push:
    branches:
      - main

env:
  APP_CONTAINER_PORT: 8083 # 你的 Go 应用在 Docker 容器内监听的端口

jobs:
  build-and-push-to-ghcr:
    name: Build and Push to GitHub Container Registry
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      # 我们将在这里明确提取并输出短SHA标签
      image_tag_short_sha: ${{ steps.extract_sha_tag.outputs.sha_tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }} # GHCR 上的包名与仓库名一致 (Owner/RepoName)
          tags: |
            type=sha,format=short,prefix= # 生成短SHA标签, 例如: abc1234
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image to GHCR
        id: build_push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # 从所有生成的标签中提取出短SHA标签
      # steps.meta.outputs.tags 是一个逗号分隔的列表，例如: ghcr.io/owner/repo:shortsha,ghcr.io/owner/repo:latest
      - name: Extract short SHA tag from metadata
        id: extract_sha_tag
        run: |
          TAGS="${{ steps.meta.outputs.tags }}"
          # 查找不包含 'latest' 且包含 ghcr.io/owner/repo 的标签，然后提取冒号后的部分
          # 这假设短SHA标签是唯一的非latest标签
          SHA_TAG=$(echo "$TAGS" | tr ',' '\n' | grep -v 'latest' | grep "ghcr.io/${{ github.repository }}:" | head -n 1 | sed 's/.*://')
          if [ -z "$SHA_TAG" ]; then
            echo "Error: Could not extract short SHA tag from metadata tags: $TAGS"
            # 如果找不到，尝试直接使用 github.sha 的前7位作为备选
            echo "Falling back to truncated github.sha"
            SHA_TAG=$(echo "${{ github.sha }}" | cut -c1-7)
          fi
          echo "Extracted short SHA tag: $SHA_TAG"
          echo "sha_tag=$SHA_TAG" >> $GITHUB_OUTPUT

      - name: Echo Docker metadata for verification
        run: |
          echo "All generated tags by metadata-action: ${{ steps.meta.outputs.tags }}"
          echo "Extracted short SHA tag for deployment: ${{ steps.extract_sha_tag.outputs.sha_tag }}"
          echo "Image Digest from build-push: ${{ steps.build_push.outputs.digest }}"

  deploy-to-cvm:
    name: Deploy to Tencent Cloud CVM
    runs-on: ubuntu-latest
    needs: build-and-push-to-ghcr

    steps:
      - name: Deploy to CVM
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.CVM_HOST }}
          username: ${{ secrets.CVM_USERNAME }}
          key: ${{ secrets.CVM_SSH_PRIVATE_KEY }}
          command_timeout: 20m # 增加命令超时到20分钟

          script: |
            set -e

            export IMAGE_TAG_TO_PULL="${{ needs.build-and-push-to-ghcr.outputs.image_tag_short_sha }}"
            export GHCR_IMAGE_BASE_LOWERCASE=$(echo "ghcr.io/${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
            export IMAGE_TO_PULL_FULL_NAME="${GHCR_IMAGE_BASE_LOWERCASE}:${IMAGE_TAG_TO_PULL}"
            export CONTAINER_NAME="post-search-app"
            export HOST_PORT="80"

            echo "准备部署的精确镜像: ${IMAGE_TO_PULL_FULL_NAME}"
            echo "使用的标签 (应为短SHA): ${IMAGE_TAG_TO_PULL}"
            echo "容器内应用端口: ${{ env.APP_CONTAINER_PORT }}"
            echo "CVM主机端口: ${HOST_PORT}"

            echo "登录 GHCR..."
            docker login ghcr.io -u ${{ secrets.CVM_GH_USERNAME }} -p ${{ secrets.GHCR_PAT_FOR_CVM }}

            echo "拉取镜像: ${IMAGE_TO_PULL_FULL_NAME}"
            retry_count=0
            max_retries=3
            retry_delay=20 # 增加重试间隔到20秒
            until docker pull ${IMAGE_TO_PULL_FULL_NAME}; do
              retry_count=$((retry_count + 1))
              if [ $retry_count -ge $max_retries ]; then
                echo "拉取镜像 ${IMAGE_TO_PULL_FULL_NAME} 失败次数过多，放弃部署。"
                exit 1
              fi
              echo "拉取镜像失败，将在 ${retry_delay} 秒后重试... (尝试次数: ${retry_count}/${max_retries})"
              sleep $retry_delay
            done
            echo "镜像 ${IMAGE_TO_PULL_FULL_NAME} 拉取成功！"

            echo "停止并删除旧容器 (如果存在)..."
            docker stop ${CONTAINER_NAME} || true
            docker rm ${CONTAINER_NAME} || true

            echo "启动新容器..."
            docker run -d \
              -p ${HOST_PORT}:${{ env.APP_CONTAINER_PORT }} \
              --name ${CONTAINER_NAME} \
              ${IMAGE_TO_PULL_FULL_NAME}
              # 注意配置文件和依赖服务的问题

            echo "清理旧镜像..."
            docker image prune -af

            echo "部署成功!"